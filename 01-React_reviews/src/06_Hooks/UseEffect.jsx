// Hook useEffect
// http://localhost:3000/alone/exercise/02.js

import * as React from 'react'
import { useState, useEffect } from 'react'

// üê∂ Corrige l'erreur gr√¢ce √† useEffect

export function LoginUseEffet({ initialEmail = '' }) {
  const [email, setEmail] = useState(initialEmail)
  const handleChange = async (event) => setEmail(event.target.value)
  const [password, setPasseword] = useState('')
  const handlePasswordChange = async (event) => setEmail(event.target.value)

  // üê∂ Cr√©√© un Hook useEffect
  // ü§ñ React.useEffect(() => { ... })

  // Est d√©clanch√© lorsque le composant est rendu et √† l'infini
  useEffect(() => {
    console.log('Email Value', document.getElementById('email').value)
  })

  // Est d√©clanch√© lorsque l'email change (d√©pendance d'effets)
  useEffect(() => {
    console.log('localStorage')
    window.localStorage.setItem('email', email)
  }, [email])

  // Est d√©clanch√© lorsque le props initialEmail change (d√©pendance d'effets sur props)
  useEffect(() => {
    console.log('localStorage initialEmail (props a chang√©)')
    window.localStorage.setItem('email', initialEmail)
  }, [initialEmail])

  // ‚õèÔ∏è Supprime ce code et ins√®re le dans useEffect
  // console.log('Email Value', document.getElementById('email').value)

  return (
    <div>
      <form>
        <label>Entrez votre email : </label>
        <input id="email" value={email} onChange={handleChange} />
      </form>
    </div>
  )
}

export function Depend_Props() {
  const [count, setCount] = React.useState(0)
  React.useEffect(() => {
    const interval = setInterval(() => {
      setCount((count) => count + 1)
    }, 5000)
    return () => clearInterval(interval)
  }, [])
  return <LoginUseEffet initialEmail={`example-${count}@example.com`} />
}